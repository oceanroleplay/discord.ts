"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3060],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),p=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(m.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,N=c["".concat(m,".").concat(u)]||c[u]||d[u]||o;return n?a.createElement(N,l(l({ref:t},s),{},{components:n})):a.createElement(N,l({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={},l="@SimpleCommandOption",i={unversionedId:"decorators/commands/simple-command-option",id:"decorators/commands/simple-command-option",title:"@SimpleCommandOption",description:"A simple command can have multiple options (parameters)",source:"@site/docs/decorators/commands/simple-command-option.md",sourceDirName:"decorators/commands",slug:"/decorators/commands/simple-command-option",permalink:"/docs/decorators/commands/simple-command-option",draft:!1,editUrl:"https://github.com/oceanroleplay/discord.ts/edit/main/docs/docs/decorators/commands/simple-command-option.md",tags:[],version:"current",lastUpdatedBy:"Victorique",lastUpdatedAt:1658340795,formattedLastUpdatedAt:"Jul 20, 2022",frontMatter:{},sidebar:"docSidebar",previous:{title:"@SimpleCommand",permalink:"/docs/decorators/commands/simple-command"},next:{title:"@Bot",permalink:"/docs/decorators/general/bot"}},m={},p=[{value:"Declare an option",id:"declare-an-option",level:2},{value:"Use custom arg splitter",id:"use-custom-arg-splitter",level:2},{value:"User instance inside DM only",id:"user-instance-inside-dm-only",level:2},{value:"Type inference",id:"type-inference",level:2},{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"name",id:"name",level:3},{value:"options",id:"options",level:3},{value:"<code>description</code>",id:"description",level:4},{value:"<code>type</code>",id:"type",level:4}],s={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"simplecommandoption"},"@SimpleCommandOption"),(0,r.kt)("p",null,"A simple command can have multiple options (parameters)"),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"A simple command is dependent on the content of the message but unfortunately, Discord plans to remove message content for verified bots and apps, those with 100 or more servers. Hence, You cannot use simple commands if your bot cannot access message content."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://support-dev.discord.com/hc/en-us/articles/4404772028055-Message-Content-Access-Deprecation-for-Verified-Bots"},"Read discord message here"))),(0,r.kt)("h2",{id:"declare-an-option"},"Declare an option"),(0,r.kt)("p",null,"To declare an option you simply use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@SimpleCommandOption")," decorator before a method parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'@SimpleCommand("hello")\nasync testCommand(\n  @SimpleCommandOption("name", { type: "STRING" }) name: string | undefined,\n  command: SimpleCommandMessage\n) {\n  if (!name) return message.reply("usage: ``!hello <your name>``");\n  command.message.reply(`hello ${name}`);\n}\n')),(0,r.kt)("h2",{id:"use-custom-arg-splitter"},"Use custom arg splitter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'@SimpleCommand("add", { argSplitter: "+" })\nasync add(\n  @SimpleCommandOption("x", { type: "INTEGER" }) x: number | undefined,\n  @SimpleCommandOption("y", { type: "INTEGER" }) y: number | undefined,\n  command: SimpleCommandMessage\n) {\n  if (!command.isValid()) return command.sendUsageSyntax();\n  return command.message.reply(`${x + y}`);\n}\n')),(0,r.kt)("h2",{id:"user-instance-inside-dm-only"},"User instance inside DM only"),(0,r.kt)("p",null,"You will receive ",(0,r.kt)("inlineCode",{parentName:"p"},"ClientUser")," if the user mentions the bot in DM. If the user mentions himself/herself, you will receive a ",(0,r.kt)("inlineCode",{parentName:"p"},"User"),". Otherwise, you'll receive an error."),(0,r.kt)("p",null,"When it comes to guilds, it will always be ",(0,r.kt)("inlineCode",{parentName:"p"},"GuildMember | User"),"."),(0,r.kt)("h2",{id:"type-inference"},"Type inference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'"STRING"'),"\n",(0,r.kt)("strong",{parentName:"p"},"Inferred from ",(0,r.kt)("inlineCode",{parentName:"strong"},"String"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SimpleCommandOption("x")\n  channel: string,\n)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'"BOOLEAN"'),"\n",(0,r.kt)("strong",{parentName:"p"},"Inferred from ",(0,r.kt)("inlineCode",{parentName:"strong"},"Boolean"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SimpleCommandOption("x")\n  channel: boolean,\n)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'"INTEGER"'),"\n",(0,r.kt)("strong",{parentName:"p"},"Inferred from ",(0,r.kt)("inlineCode",{parentName:"strong"},"Number"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SimpleCommandOption("x")\n  channel: number,\n)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'"ROLE"'),"\n",(0,r.kt)("strong",{parentName:"p"},"Inferred from ",(0,r.kt)("inlineCode",{parentName:"strong"},"Role"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SimpleCommandOption("x")\n  channel: Role,\n)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'"USER"'),"\n",(0,r.kt)("strong",{parentName:"p"},"Inferred from ",(0,r.kt)("inlineCode",{parentName:"strong"},"User")," | ",(0,r.kt)("inlineCode",{parentName:"strong"},"GuildMember")," (you will receive GuildMember if present otherwise User)")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SimpleCommandOption("x")\n  channel: User,\n)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'"CHANNEL"'),"\n",(0,r.kt)("strong",{parentName:"p"},"Inferred from ",(0,r.kt)("inlineCode",{parentName:"strong"},"Channel")," (or ",(0,r.kt)("inlineCode",{parentName:"strong"},"TextChannel")," / ",(0,r.kt)("inlineCode",{parentName:"strong"},"VoiceChannel"),", not recommended)")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SimpleCommandOption("x")\n  channel: Channel,\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'"MENTIONABLE"'),"\n",(0,r.kt)("strong",{parentName:"p"},"No inference, use:")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SimpleCommandOption("x", { type: "MENTIONABLE" })\n  channel: GuildMember | User | Role,\n)\n')))),(0,r.kt)("h2",{id:"signature"},"Signature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'SimpleCommandOption( name: string, options?: { description?: string; type?: "STRING | INTEGER | NUMBER | BOOLEAN | USER | CHANNEL | ROLE | MENTIONABLE" } );\n')),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("h3",{id:"name"},"name"),(0,r.kt)("p",null,"The name of your command option"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"default"),(0,r.kt)("th",{parentName:"tr",align:null},"required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("h3",{id:"options"},"options"),(0,r.kt)("p",null,"Multiple options, check below."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"default"),(0,r.kt)("th",{parentName:"tr",align:null},"required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h4",{id:"description"},(0,r.kt)("inlineCode",{parentName:"h4"},"description")),(0,r.kt)("p",null,"The description of command option"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Command type")))),(0,r.kt)("h4",{id:"type"},(0,r.kt)("inlineCode",{parentName:"h4"},"type")),(0,r.kt)("p",null,"The type of your command option"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"type"),(0,r.kt)("th",{parentName:"tr",align:null},"default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STRING ","|"," INTEGER ","|"," NUMBER ","|"," BOOLEAN ","|"," USER ","|"," CHANNEL ","|"," ROLE ","|"," MENTIONABLE"),(0,r.kt)("td",{parentName:"tr",align:null},"inference")))))}d.isMDXComponent=!0}}]);